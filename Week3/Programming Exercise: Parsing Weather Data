import edu.duke.*;
import org.apache.commons.csv.*;
import java.io.*;
/**
 * Week3
 * 
 * @Sam20
 * @2/9/2020
 */
public class ParsingWeatherData {
    public CSVRecord coldestHourInFile(CSVParser parser) {
        //FileResource fr = new FileResource();
        CSVRecord coldestSoFar = null;
        for (CSVRecord currentRow: parser) {
            coldestSoFar = getSmallestOfTwo(currentRow, coldestSoFar);
            
        }
        return coldestSoFar;
    }
    
    public void testColdestHourInFile() {
        FileResource fr = new FileResource();
        CSVParser parser = fr.getCSVParser();
        CSVRecord coldest = coldestHourInFile(parser);
        System.out.println("coldest temperature was " + coldest.get("TemperatureF") + " at " + coldest.get("DateUTC"));
    }
    
    public CSVRecord getSmallestOfTwo(CSVRecord currentRow, CSVRecord coldestSoFar) {
        if (coldestSoFar == null) {
            coldestSoFar = currentRow;
        }
        else {
            double currentTemp = Double.parseDouble(currentRow.get("TemperatureF"));
            double coldestTemp = Double.parseDouble(coldestSoFar.get("TemperatureF"));
            if (coldestTemp > currentTemp && currentTemp != -9999) {
                coldestSoFar = currentRow;
            }
        }
        return coldestSoFar;
    }
    
    public String fileWithColdestTemperature() {
        CSVRecord coldestSoFar = null;
        DirectoryResource dr = new DirectoryResource();
        String filename = "";
        for (File f: dr.selectedFiles()) {
            FileResource fr = new FileResource(f);
            CSVRecord currentRow = coldestHourInFile(fr.getCSVParser());
            coldestSoFar = getSmallestOfTwo(currentRow, coldestSoFar);
            
            filename = f.getPath(); #這不對，得出來的結果總是一年最後一天
        }
        //return coldestSoFar.get("DateUTC");
        return filename;
    }
    
    public void testFileWithColdestTemperature() {
        String filename = fileWithColdestTemperature();
        FileResource fr = new FileResource(filename);
        //CSVParser parser = fr.getCSVParser();
        CSVRecord coldest = coldestHourInFile(fr.getCSVParser());
        System.out.println("Coldest day was in file " + filename);
        System.out.println("Coldest temperature on that day was " + coldest.get("TemperatureF"));
        System.out.println("All the Temperatures on the coldest day were: ");
        for (CSVRecord currentRow: fr.getCSVParser()) {
            System.out.println(currentRow.get("DateUTC") + ": " + currentRow.get("TemperatureF"));
        }
    }
    
    public CSVRecord lowestHumidityInFile(CSVParser parser) {
        CSVRecord smallestHumidity = null;
        for (CSVRecord currentRow: parser) {
            smallestHumidity = getSmallestHumidityOfTwo(currentRow, smallestHumidity);
        }
        return smallestHumidity;
    } 
    
    public CSVRecord getSmallestHumidityOfTwo(CSVRecord currentRow, CSVRecord smallestSoFar) {
        if (smallestSoFar == null) {
            smallestSoFar = currentRow;
            }
        else {
            if (currentRow.get("Humidity").length() != 3) {
                double currentTemp = Double.parseDouble(currentRow.get("Humidity"));
                double smallestTemp = Double.parseDouble(smallestSoFar.get("Humidity"));
                if (smallestTemp > currentTemp && currentTemp != -9999) {
                    smallestSoFar = currentRow;
                }
            }
        }
        return smallestSoFar;
    }
    
    public void testLowestHumidityInFile() {
        FileResource fr = new FileResource();
        CSVParser parser = fr.getCSVParser();
        CSVRecord csv = lowestHumidityInFile(parser);
        System.out.println("Lowest Humidity was " + csv.get("Humidity") + " at " + csv.get("DateUTC"));
    }
    
    public CSVRecord lowestHumidityInManyFiles() {
        CSVRecord smallestSoFar = null;
        DirectoryResource dr = new DirectoryResource();
        for (File f: dr.selectedFiles()) {
            FileResource fr = new FileResource(f);
            CSVRecord currentRow = lowestHumidityInFile(fr.getCSVParser());
            if (smallestSoFar == null) {
                smallestSoFar = currentRow;
            }
            else {
                if (currentRow.get("Humidity").length() != 3) {
                    double currentTemp = Double.parseDouble(currentRow.get("Humidity"));
                    double smallestTemp = Double.parseDouble(smallestSoFar.get("Humidity"));
                if (smallestTemp > currentTemp && currentTemp != -9999) {
                    smallestSoFar = currentRow;
                }
                }
            }
        }
        return smallestSoFar;
    }
    
    public void testLowestHumidityInManyFiles() {
        CSVRecord lowest = lowestHumidityInManyFiles();
        System.out.println("Lowest Humidity was " + lowest.get("Humidity") + " at " +
        lowest.get("DateUTC"));
    }
    
    public double averageTemperatureInFile(CSVParser parser) {
        double count = 0;
        double sum = 0;
        for (CSVRecord temp: parser) {
            sum = sum + Double.parseDouble(temp.get("TemperatureF"));
            count = count + 1;
        }
        double avg = sum / count;
        return avg;
    }
    
    public void testAverageTemperatureInFile() {
        FileResource fr = new FileResource();
        CSVParser parser = fr.getCSVParser();
        double avg = averageTemperatureInFile(parser);
        System.out.println("Average temperature in file is " + avg);
    }
    
    public double averageTemperatureWithHighHumidityInFile(CSVParser parser, int value) {
        CSVRecord avgTemp = null;
        double sum = 0;
        double count = 0;
        double avg = 0;
        for (CSVRecord currentRow: parser) {
            double currentHumidity = Double.parseDouble(currentRow.get("Humidity"));
            double currentTemp = Double.parseDouble(currentRow.get("TemperatureF"));
            if (currentHumidity >= value) {
                sum = sum + currentTemp;
                count = count + 1;
                avg = sum / count;
            }
        }
        
        return avg;
    }
    
    public void testAverageTemperatureWithHighHumidityInFile() {
        FileResource fr = new FileResource();
        CSVParser parser = fr.getCSVParser();
        double avg = averageTemperatureWithHighHumidityInFile(parser, 80);
        if (avg == 0) {
            System.out.println("No temperatures with that humidity");
        }
        else {
            System.out.println("Average Temp when high Humidity is " + avg);
        }
    }

}
